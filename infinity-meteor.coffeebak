# Performance monitoring : https://kadira.io/
# watching DDP msgs : https://github.com/arunoda/meteor-ddp-analyzer
# DDP: Distributed Data Protocol: 
#   https://github.com/meteor/meteor/blob/devel/packages/ddp/DDP.md
#   https://meteorhacks.com/introduction-to-ddp.html
# heavy use of http://js2.coffee/
# https://atmospherejs.com/dandv/http-more
# mongo filter for auth "334" vs 334 :(
#
#

#
########################### Shared Code #########################
#

AuthorityDB = new (Mongo.Collection)('authority')
EstablishmentDB = new (Mongo.Collection)('establishment')

# Setup pince logger  - https://atmospherejs.com/jag/pince
log = new Logger('app')
Logger.setLevel 'info'
Logger.setLevel 'app', 'trace'

# Experimental logger : 
# tb = Observatory.getToolbox()
# tb info "got json back ", result


#
########################### Client Code #########################
#

if Meteor.isClient

  Template.hello.helpers 
    authorities: -> Session.get 'authorities'
    authority: -> Session.get 'authority'
    businesses: -> Session.get 'businesses'

  # TODO: Expose as client method
  # AuthorityDB.remove({});
  # EstablishmentDB.remove({});

  clickButton = ->
    options = fields: 
      name : 1
      localAuthorityId : 1 

    cursor = AuthorityDB.find {}, options

    Session.set 'authorities', cursor.fetch()
    return

  changeAuthority = (evt) ->
    newValue = $(evt.target).val()
    Session.set 'authority', newValue

    log.info("setting localAuthorityId to " + newValue)

    # note we HAVE to cast to a Number - lost a lot of time on that! :(
    selector =
      localAuthorityId : Number(newValue)

    options = fields: 
      localAuthorityId : 1
      ratingValue : 1
      businessName : 1 

    log.info options

    cursor = EstablishmentDB.find selector, options
    businesses = cursor.fetch()

    sumMap = {}
    sumMap[business.ratingValue] += 1 for business in businesses

    log.info sumMap

    log.info businesses.length  
    Session.set 'businesses', businesses
    return

  Template.hello.events 
    'click button': clickButton
    'change #authorityPicker': changeAuthority




#
######################### Server code #########################
#

if Meteor.isServer

  #TODO:Clear DB
  Kadira.connect('5FgBP5BXun7muycFp', 'e78ff442-ce3b-4883-a89f-83608afa052a')

  #
  # Food Standards API Constants
  #

  # URLS
  apiUrlAuthorities = 'http://api.ratings.food.gov.uk/Authorities/basic'
  apiUrlEstablishments = 'http://api.ratings.food.gov.uk/Establishments'

  # request headers
  apiHeaders =
    'x-api-version' : '2'
    'accept' : 'application/json'
    'content-type' : 'application/json'
    'Accept-Language' : 'en-GB'

  # Collection Upsert option
  dbUpsertOption = upsert: true

  # # create a method to return authority names
  # Meteor.methods
  #   getAuthorityNames: () ->
  #     log.info "Fetching authority names"
  #     cursor = AuthorityDB.find {}, { fields: 'name' : 1 }
  #     log.trace "cursor: " + cursor.fetch()
  #     return cursor.fetch()

  updateEstablishmentsDB = (authorityId, authorityDescription, establishments) ->

    #log.trace establishments
    log.info "Updating for " + establishments.length + " establishments"

    for establishment in establishments
      # capture establishment in scope - the coffescript way :/
      do (establishment) ->
        establishmentLogLabel = "#{establishment.BusinessName} (#{establishment.FHRSID})"

        log.trace "Upserting establishment (for #{authorityId}) : " + establishmentLogLabel

        # TODO: Confirm FHRSID is GUID
        selector = 
          FHRSID: establishment.FHRSID
      
        setter = $set: 
          FHRSID: establishment.FHRSID
          localAuthorityId: authorityId
          ratingValue: establishment.RatingValue
          businessName: establishment.BusinessName

        EstablishmentDB.update selector, setter, dbUpsertOption, 
          (error, numberOfInserts) ->
            if !error
              log.trace "Upserted establishment (for #{authorityId}): " + establishmentLogLabel
            else
              log.error "Couldn't upsert establishment (for #{authorityId}): " + establishmentLogLabel

    return



  updateEstablishments = (authority, authorityLogLabel, pageNumber) ->

    log.info "Getting establishments for #{authorityLogLabel} - page #{pageNumber}"
    
    log.trace authority

    query = 
      'localAuthorityId' : authority.LocalAuthorityId
      'pageSize' : 500
      'pageNumber' : pageNumber

    options = 
      'headers': apiHeaders
      'params': query

    HTTP.get apiUrlEstablishments, options, 
      (error, result) ->
        log.debug "pageSize " + query.pageSize
        if !error
          #log.debug result.content.meta.pageSize
          parsedContent = JSON.parse(result.content)

          log.debug "url was  : " + result.href
          log.debug "pageSize from server : " + parsedContent.meta.pageSize
          log.debug "currentPage from server : " + parsedContent.meta.pageSize

          # update DB
          updateEstablishmentsDB authority.LocalAuthorityId, authorityLogLabel, parsedContent.establishments

          # is this the last page?
          if parsedContent.meta.totalPages == pageNumber
            log.info "Processed all establishment pages for #{authorityLogLabel}"
            return
          else
            # limit to one page for now - TODO: open up
            return

            # get next page
            pageNumber++
            log.debug "Getting next page #{pageNumber}"
            updateEstablishments authority, authorityLogLabel, pageNumber

        else
          log.error "Couldn't get establishments for authority: " + authorityLogLabel
    

    return
      
  
  # upsert the authority to DB 
  updateAuthorityDB = (authorities) ->
    log.info "Updating for " + authorities.length + " authorities"

    for authority, i in authorities
      authorityLogLabel = "#{authority.Name} (#{authority.LocalAuthorityId})"

      selector = localAuthorityId: authority.LocalAuthorityId
      setter = $set: 
        localAuthorityId: authority.LocalAuthorityId
        name: authority.Name

      log.debug "Upserting authority : " + authorityLogLabel

      # limit scope to this loop - the coffescript way :/
      do (authority, authorityLogLabel) ->
        # upsert this Authority
        AuthorityDB.update selector, setter, dbUpsertOption, 
          (error, numberOfInserts) ->
            if !error
              log.debug "Upserted authority : " + authorityLogLabel
              # now go update the establishments for this authority
              updateEstablishments authority, authorityLogLabel, 1
            else
              log.error "Couldn't upsert authority: " + authorityLogLabel

      # limit to a few for now TODO : open up
      if i > 5
        break

    log.info "Updating for all Authorities complete"

    return


  # run on server at startup
  Meteor.startup ->

    # HTTP GET Authorities
    HTTP.get apiUrlAuthorities, { headers: apiHeaders }, (error, result) ->
      if !error
        log.info 'Got authorities'
#       log.debug result.content
        
        # parse the content
        parsedContent = JSON.parse(result.content)

        # update the db with authorities
        updateAuthorityDB parsedContent.authorities

      else
        log.error 'getAuthorities failed with HTTP error: ' + error
      return

    return

